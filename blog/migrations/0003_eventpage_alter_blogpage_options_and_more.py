# Generated by Django 5.2.4 on 2025-09-11 16:04

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("blog", "0002_delete_homepage"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        ("wagtailimages", "0027_image_description"),
    ]

    operations = [
        migrations.CreateModel(
            name="EventPage",
            fields=[
                (
                    "blogpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="blog.blogpage",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="When the event starts",
                        verbose_name="Event start date",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        default="Online",
                        help_text="Event location (e.g., 'Online', 'San Francisco')",
                        max_length=255,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        default="event",
                        help_text="Type of event (workshop, conference, etc.)",
                        max_length=100,
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Page",
                "verbose_name_plural": "Event Pages",
            },
            bases=("blog.blogpage",),
        ),
        migrations.AlterModelOptions(
            name="blogpage",
            options={"verbose_name": "Blog Page", "verbose_name_plural": "Blog Pages"},
        ),
        migrations.RemoveField(
            model_name="blogpage",
            name="intro",
        ),
        migrations.AddField(
            model_name="blogpage",
            name="custom_permalink",
            field=models.SlugField(
                blank=True,
                help_text="Custom URL path (e.g., 'my-post.html')",
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="enable_comments",
            field=models.BooleanField(
                default=True, help_text="Enable comments for this post"
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="excerpt",
            field=models.TextField(
                blank=True,
                help_text="Brief description of the post (maps to Jekyll excerpt)",
                max_length=500,
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="header_image",
            field=models.ForeignKey(
                blank=True,
                help_text="Header/overlay image for the post",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="wagtailimages.image",
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="header_image_alt",
            field=models.CharField(
                blank=True, help_text="Alt text for header image", max_length=255
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="last_modified",
            field=models.DateField(
                blank=True, help_text="Date when post was last modified", null=True
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="layout_classes",
            field=models.CharField(
                blank=True,
                default="wide",
                help_text="CSS classes for layout (e.g., 'wide')",
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="blogpage",
            name="show_toc",
            field=models.BooleanField(default=True, help_text="Show table of contents"),
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "bio",
                    models.TextField(blank=True, help_text="Short bio of the author"),
                ),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("website", models.URLField(blank=True)),
                (
                    "github",
                    models.CharField(
                        blank=True, help_text="GitHub username", max_length=100
                    ),
                ),
                ("linkedin", models.URLField(blank=True)),
                ("mastodon", models.URLField(blank=True)),
                ("discord", models.URLField(blank=True)),
                (
                    "avatar",
                    models.ForeignKey(
                        blank=True,
                        help_text="Author's profile image",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Author",
                "verbose_name_plural": "Authors",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="blogpage",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="blog_posts",
                to="blog.author",
            ),
        ),
        migrations.CreateModel(
            name="BlogPageTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="blog.blogpage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="blogpage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="blog.BlogPageTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
    ]
